#ifndef INFERENCE_H_
#define INFERENCE_H_

{{#layers}}
#define L{{idx}}_SIZE           ({{size}}u)
{{#pad_right}}
#define L{{idx}}_PAD_RIGHT      ({{pad_right}}u)
{{/pad_right}}
{{^pad_right}}
#define L{{idx}}_PAD_RIGHT      (0x0u)
{{/pad_right}}
{{#pad_left}}
#define L{{idx}}_PAD_LEFT       ({{pad_left}}u)
{{/pad_left}}
{{^pad_left}}
#define L{{idx}}_PAD_LEFT       (0x0u)
{{/pad_left}}
{{#pad_bottom}}
#define L{{idx}}_PAD_BOTTOM     ({{pad_bottom}}u)
{{/pad_bottom}}
{{^pad_bottom}}
#define L{{idx}}_PAD_BOTTOM     (0x0u)
{{/pad_bottom}}
{{#pad_top}}
#define L{{idx}}_PAD_TOP        ({{pad_top}}u)
{{/pad_top}}
{{^pad_top}}
#define L{{idx}}_PAD_TOP        (0x0u)
{{/pad_top}}
{{#strides}}
#define L{{idx}}_STRIDES        ({{strides}}u)
{{/strides}}
{{^strides}}
#define L{{idx}}_STRIDES        (0x0u)
{{/strides}}
{{#pool_size}}
#define L{{idx}}_POOL_SIZE      ({{pool_size}}u)
{{/pool_size}}
{{^pool_size}}
#define L{{idx}}_POOL_SIZE      (0x0u)
{{/pool_size}}
{{#kernel_size}}
#define L{{idx}}_KERNEL_SIZE    ({{kernel_size}}u)
{{/kernel_size}}
{{^kernel_size}}
#define L{{idx}}_KERNEL_SIZE    (0x0u)
{{/kernel_size}}
{{#dilation_rate}}
#define L{{idx}}_DILATION_RATE  ({{dilation_rate}}u)
{{/dilation_rate}}
{{^dilation_rate}}
#define L{{idx}}_DILATION_RATE  (0x0u)
{{/dilation_rate}}
{{#nb_filters}}
#define L{{idx}}_NB_FILTERS     ({{nb_filters}}u)
{{/nb_filters}}
{{^nb_filters}}
#define L{{idx}}_NB_FILTERS     (0x0u)
{{/nb_filters}}
{{#input_height}}
#define L{{idx}}_INPUT_HEIGHT   ({{input_height}}u)
{{/input_height}}
{{^input_height}}
#define L{{idx}}_INPUT_HEIGHT   (0x0u)
{{/input_height}}
{{#input_width}}
#define L{{idx}}_INPUT_WIDTH    ({{input_width}}u)
{{/input_width}}
{{^input_width}}
#define L{{idx}}_INPUT_WIDTH    (0x0u)
{{/input_width}}
{{#input_channels}}
#define L{{idx}}_INPUT_CHANNELS ({{input_channels}}u)
{{/input_channels}}
{{^input_channels}}
#define L{{idx}}_INPUT_CHANNELS (0x0u)
{{/input_channels}}
{{#ouput_height}}
#define L{{idx}}_OUTPUT_HEIGHT  ({{output_height}}u)
{{/ouput_height}}
{{^ouput_height}}
#define L{{idx}}_OUTPUT_HEIGHT  (0x0u)
{{/ouput_height}}
{{#output_width}}
#define L{{idx}}_OUTPUT_WIDTH   ({{output_width}}u)
{{/output_width}}
{{^output_width}}
#define L{{idx}}_OUTPUT_WIDTH   (0x0u)
{{/output_width}}

{{/layers}}

#define nb_layers 9
#define nb_params_max 14
#define l_size_max 3456
struct layer
{
    int (*layer_type)(int, float*, float*);
    const int layer_size;
    const int pad_right;
    const int pad_left;
    const int pad_bottom;
    const int pad_top;
    const int strides;
    const int pool_size;
    const int kernel_size;
    const int dilation_rate;
    const int nb_filters;
    const int input_channels;
    const int input_height;
    const int input_width;
    const int output_height;
    const int output_width;
    float *weights;
    float *biases;
    float (*actv_function)(float);
};

extern struct layer net[nb_layers];

int inference(float *prediction, float *nn_input);

#endif
